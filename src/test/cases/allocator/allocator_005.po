import std;

namespace Example {

    static f32 stress_fp(i64 cond1, i64 cond2, i64 cond3) {
        // Lots of live FP variables to exceed the available FP registers
        f32 a = 1.1f; f32 b = 2.2f; f32 c = 3.3f; f32 d = 4.4f; f32 e = 5.5f;
        f32 f = 6.6f; f32 g = 7.7f; f32 h = 8.8f; f32 i = 9.9f; f32 j = 10.1f;
        f32 result = 0.0f;

        if (cond1==1) {
            a = b * c;
            d = e + f;
            if (cond2==1) {
                g = a / d;
                h = b - e;
            } else {
                g = c + f;
                h = d * a;
            }
            result = result + g + h;
        } else {
            b = a + j;
            if (cond3==1) {
                c = b * i;
                e = d - f;
            } else {
                c = g / (h + 1.0f);  // reuse g,h to stretch live ranges
                e = i * j;
            }
            result = result + c + e;
        }

        // All FP variables are still live here ? big join point
        result = result + a + b + c + d + e + f + g + h + i + j;
        return result; // 252.452000
    }

    static void main() {
        print_64((i64)stress_fp(1, 0, 1));
    }

}
